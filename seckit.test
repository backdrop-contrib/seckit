<?php
/**
 * @file
 * Tests for Security Kit module.
 */

/**
 * Functional tests for Security Kit.
 *
 * Note, that functionality related IE MIME-sniffer isn't
 * tested as long as Drupal 6 version of SimpleTest module
 * lacks Ajax methods.
 */
class SecKitTestCase extends DrupalWebTestCase {
  /**
   * Admin user for tests
   * @var object
   */
  private $admin;

  /**
   * Implements getInfo().
   * @see DrupalWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => t('Security Kit functionality'),
      'description' => t('Tests functionality and settings page of Security Kit module.'),
      'group' => t('Security Kit'),
    );
  }

  /**
   * Implements setUp().
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp('upload', 'seckit');
    $this->admin = $this->drupalCreateUser(array('administer seckit'));
    $this->drupalLogin($this->admin);
  }

  /**
   * Tests disabled Content Security Policy.
   */
  public function testDisabledCSP() {
    $form['seckit_xss[csp][checkbox]'] = 0;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertFalse($this->drupalGetHeader('X-Content-Security-Policy'),
      t('Content Security Policy is disabled'));
  }

  /**
   * Tests Content Security Policy with all enabled directives.
   */
  public function testCSPHasAllDirectives() {
    $form = array(
      'seckit_xss[csp][checkbox]' => 1,
      'seckit_xss[csp][allow]' => '*',
      'seckit_xss[csp][options]' => 'inline-scripts eval-script',
      'seckit_xss[csp][img-src]' => '*',
      'seckit_xss[csp][media-src]' => '*',
      'seckit_xss[csp][script-src]' => '*',
      'seckit_xss[csp][object-src]' => '*',
      'seckit_xss[csp][frame-src]' => '*',
      'seckit_xss[csp][font-src]' => '*',
      'seckit_xss[csp][xhr-src]' => '*',
      'seckit_xss[csp][style-src]' => '*',
      'seckit_xss[csp][frame-ancestors]' => '*',
    );
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $expected = 'allow *; options inline-scripts eval-script; img-src *; media-src *; script-src *; object-src *; frame-src *; font-src *; xhr-src *; style-src *; frame-ancestors *';
    $this->assertEqual($expected, $this->drupalGetHeader('X-Content-Security-Policy'),
      t('X-Content-Security has all the directves'));
  }

  /**
   * Tests disabled X-XSS-Protection HTTP response header.
   */
  public function testXXSSProtectionIsDisabled() {
    $form['seckit_xss[x_xss][select]'] = 0;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertFalse($this->drupalGetHeader('X-XSS-Protection'),
      t('X-XSS-Protection is disabled'));
  }

  /**
   * Tests set to 0 X-XSS-Protection HTTP response header.
   */
  public function testXXSSProtectionIs0() {
    $form['seckit_xss[x_xss][select]'] = 1;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertEqual(0, $this->drupalGetHeader('X-XSS-Protection'),
      t('X-XSS-Protection is set to 0'));
  }

  /**
   * Tests set to 1; mode=block X-XSS-Protection HTTP response header.
   */
  public function testXXSSProtectionIs1() {
    $form['seckit_xss[x_xss][select]'] = 2;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertEqual('1; mode=block', $this->drupalGetHeader('X-XSS-Protection'),
      t('X-XSS-Protection is set to 1; mode=block'));
  }

  /**
   * Tests HTTP Origin allows requests from the site.
   */
  public function testOriginAllowsSite() {
    global $base_url;
    $form['seckit_csrf[origin]'] = 1;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'),
      array(), array('Origin' => $base_url));
    $this->assertResponse(200,
      t('Request is allowed.'));
  }

  /**
   * Tests HTTP Origin allows requests from the specified source.
   */
  public function testOriginAllowsSpecifiedSource() {
    $source = 'http://www.example.com';
    $form = array(
      'seckit_csrf[origin]' => 1,
      'seckit_csrf[origin_whitelist]' => $source,
    );
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'),
      array(), array('Origin' => $source));
    $this->assertResponse(200,
      t('Whitelisted request is allowed.'));
  }

  /**
   * Tests HTTP Origin denies request.
   */
  public function testOriginDeny() {
    $form['seckit_csrf[origin]'] = 1;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'),
      array(), array('Origin' => 'http://www.example.com'));
    $this->assertResponse(403,
      t('Request is denied.'));
  }

  /**
   * Tests disabled X-Frame-Options HTTP response header.
   */
  public function testXFrameOptionsIsDisabled() {
    $form['seckit_clickjacking[x_frame]'] = 0;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertFalse($this->drupalGetHeader('X-Frame-Options'),
      t('X-Frame-Options is disabled'));
  }

  /**
   * Tests set to SameOrigin X-Frame-Options HTTP response header.
   */
  public function testXFrameOptionsIsSameOrigin() {
    $form['seckit_clickjacking[x_frame]'] = 1;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertEqual('SameOrigin', $this->drupalGetHeader('X-Frame-Options'),
      t('X-Frame-Options is set to SameOrigin'));
  }

  /**
   * Tests set to Deny X-Frame-Options HTTP response header.
   */
  public function testXFrameOptionsIsDeny() {
    $form['seckit_clickjacking[x_frame]'] = 2;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertEqual('Deny', $this->drupalGetHeader('X-Frame-Options'),
      t('X-Frame-Options is set to Deny'));
  }

  /**
   * Tests JS + CSS + Noscript protection.
   */
  public function testJSCSSNoscript() {
    $form['seckit_clickjacking[js_css_noscript]'] = 1;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $path = base_path() . drupal_get_path('module', 'seckit');
    $code = <<< EOT
      // close script tag for SecKit protection
      //--><!]]>
      </script>
      <script type="text/javascript" src="$path/js/seckit.document_write.js"></script>
      <link type="text/css" rel="stylesheet" id="seckit-clickjacking-no-body" media="all" href="$path/css/seckit.no_body.css" />
      <! stop SecKit protection -->
      <script type="text/javascript">
      <!--//--><![CDATA[//><!--
      // open script tag to avoid syntax errors
EOT;
    $this->assertRaw($code,
      t('Files seckit.document_write.js and seckit.no_body.css are loaded.'));
    $code = <<< EOT
      // close script tag for SecKit protection
      //--><!]]>
      </script>
      <noscript>
      <style>
        /**
         * Override style of seckit.no_body.css to show div with message
         */
        body {
          display: block !important;
        }
        /**
         * Set style of div with message
         * "Sorry, you need to enable JavaScript to visit this website."
         * so it hides all site behind itself.
         */
        #seckit-noscript-tag {
          background-color: white;
          position: fixed;
          top: 0px;
          left: 0px;
          height: 100% !important;
          width: 100% !important;
          z-index: 999 !important;
          font-family: sans-serif;
          font-weight: bold;
          color: red;
          text-align: center;
          padding-top: 20px;
        }
      </style>
      <div id="seckit-noscript-tag">
        <h1>Sorry, you need to enable JavaScript to visit this website.</h1>
      </div>
      </noscript>
      <script type="text/javascript">
      <!--//--><![CDATA[//><!--
      // open script tag to avoid syntax errors
EOT;
    $this->assertRaw($code,
      t('HTML code with seckit-noscript-tag is loaded.'));
  }

  /**
   * Tests style override for frames, objects and embeds.
   */
  public function testStyleOverride() {
    $form['seckit_clickjacking[override_style]'] = 1;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $path = addcslashes(drupal_get_path('module', 'seckit'), '/');
    $regex = '/<link type="text\/css" rel="stylesheet" media="all" href="\/' . $path . '\/css\/seckit\.override_style\.css.+" \>/';
    $code = '<link type="text/css" rel="stylesheet" media="all" href="/' . $path . '/css/seckit.override_style.css?v" />';
    $this->assertRaw($code,
      t('Style override CSS is loaded.'));
    $this->assertPattern($regex,
      t('Style override CSS is loaded.'));
  }

 /**
  * Tests disabled HTTP Strict Transport Security.
  */
  public function testDisabledHSTS() {
    $form['seckit_ssl[hsts]'] = 0;
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $this->assertFalse($this->drupalGetHeader('Strict-Transport-Security'),
      t('HTTP Strict Transport Security is disabled'));
  }

 /**
  * Tests HTTP Strict Transport Security has all directives.
  */
  public function testHSTSAllDirectves() {
    $form = array(
      'seckit_ssl[hsts]' => 1,
      'seckit_ssl[hsts_max_age]' => 1000,
      'seckit_ssl[hsts_subdomains]' => 1,
    );
    $this->drupalPost('admin/settings/seckit', $form, t('Save configuration'));
    $expected = 'max-age=1000; includeSubDomains';
    $this->assertEqual($expected, $this->drupalGetHeader('Strict-Transport-Security'),
      t('HTTP Strict Transport Security is disabled'));
  }
}